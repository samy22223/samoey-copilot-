openapi: 3.0.0
info:
  title: Samoey Copilot API
  description: Comprehensive API documentation for Samoey Copilot project
  version: 1.0.0
  contact:
    name: Samoey Copilot Team
    email: support@samoey-copilot.com

servers:
  - url: http://localhost:8000/api/v1
    description: Development server
  - url: https://api.samoey-copilot.com/v1
    description: Production server

paths:
  /auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      description: Authenticate user and return access token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                  example: user@example.com
                password:
                  type: string
                  format: password
                  example: securepassword123
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                  token_type:
                    type: string
                    example: bearer
        '401':
          description: Invalid credentials

  /auth/register:
    post:
      tags:
        - Authentication
      summary: User registration
      description: Register a new user account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - email
                - password
              properties:
                username:
                  type: string
                  example: newuser
                email:
                  type: string
                  format: email
                  example: user@example.com
                password:
                  type: string
                  format: password
                  example: securepassword123
                full_name:
                  type: string
                  example: John Doe
      responses:
        '201':
          description: User created successfully
        '400':
          description: Invalid input data
        '409':
          description: User already exists

  /users/:
    get:
      tags:
        - Users
      summary: Get all users
      description: Retrieve a list of all users (admin only)
      security:
        - BearerAuth: []
      parameters:
        - name: skip
          in: query
          schema:
            type: integer
            default: 0
        - name: limit
          in: query
          schema:
            type: integer
            default: 100
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized

  /users/me:
    get:
      tags:
        - Users
      summary: Get current user
      description: Get information about the current authenticated user
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Current user information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized

  /files/upload:
    post:
      tags:
        - Files
      summary: Upload file
      description: Upload a file to the server
      security:
        - BearerAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: File to upload
      responses:
        '200':
          description: File uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  file_id:
                    type: string
                  filename:
                    type: string
                  size:
                    type: integer
                  url:
                    type: string
        '400':
          description: Invalid file or size exceeded
        '401':
          description: Unauthorized

  /files/{file_id}:
    get:
      tags:
        - Files
      summary: Download file
      description: Download a file by ID
      security:
        - BearerAuth: []
      parameters:
        - name: file_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: File content
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '404':
          description: File not found
        '401':
          description: Unauthorized

  /notifications/:
    get:
      tags:
        - Notifications
      summary: Get notifications
      description: Get user notifications
      security:
        - BearerAuth: []
      parameters:
        - name: skip
          in: query
          schema:
            type: integer
            default: 0
        - name: limit
          in: query
          schema:
            type: integer
            default: 50
        - name: unread_only
          in: query
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: List of notifications
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Notification'
        '401':
          description: Unauthorized

  /notifications/{notification_id}/read:
    post:
      tags:
        - Notifications
      summary: Mark notification as read
      description: Mark a specific notification as read
      security:
        - BearerAuth: []
      parameters:
        - name: notification_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Notification marked as read
        '404':
          description: Notification not found
        '401':
          description: Unauthorized

  /analytics/usage:
    get:
      tags:
        - Analytics
      summary: Get usage analytics
      description: Get usage statistics and analytics
      security:
        - BearerAuth: []
      parameters:
        - name: start_date
          in: query
          schema:
            type: string
            format: date
        - name: end_date
          in: query
          schema:
            type: string
            format: date
      responses:
        '200':
          description: Usage analytics data
          content:
            application/json:
              schema:
                type: object
                properties:
                  total_users:
                    type: integer
                  active_users:
                    type: integer
                  api_calls:
                    type: integer
                  storage_used:
                    type: integer
        '401':
          description: Unauthorized

  /health/:
    get:
      tags:
        - System
      summary: Health check
      description: System health check endpoint
      responses:
        '200':
          description: System is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: healthy
                  timestamp:
                    type: string
                    format: date-time
                  version:
                    type: string

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
        email:
          type: string
          format: email
        full_name:
          type: string
        is_active:
          type: boolean
          default: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    Notification:
      type: object
      properties:
        id:
          type: string
          format: uuid
        user_id:
          type: string
          format: uuid
        type:
          type: string
          enum: [info, warning, error, success]
        title:
          type: string
        message:
          type: string
        is_read:
          type: boolean
          default: false
        created_at:
          type: string
          format: date-time

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
        message:
          type: string
        details:
          type: object
