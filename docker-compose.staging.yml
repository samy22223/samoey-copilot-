services:
  # Staging Database
  staging-db:
    image: postgres:15-alpine
    env_file:
      - .env.staging
    environment:
      POSTGRES_DB: samoey_copilot_staging
      POSTGRES_USER: staging
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - "5434:5432"
    volumes:
      - staging_postgres_data:/var/lib/postgresql/data
    networks:
      - staging-network

  # Staging Redis
  staging-redis:
    image: redis:7-alpine
    env_file:
      - .env.staging
    command: redis-server --requirepass ${REDIS_PASSWORD}
    ports:
      - "6381:6379"
    volumes:
      - staging_redis_data:/data
    networks:
      - staging-network

  # Staging Application
  staging-app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    env_file:
      - .env.staging
    environment:
      - NODE_ENV=staging
      - DATABASE_URL=postgresql://staging:${DB_PASSWORD}@staging-db:5432/samoey_copilot_staging
      - REDIS_URL=redis://:${REDIS_PASSWORD}@staging-redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - HUGGINGFACE_TOKEN=${HUGGINGFACE_TOKEN}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - JWT_REFRESH_SECRET_KEY=${JWT_REFRESH_SECRET_KEY}
      - SENTRY_DSN=${SENTRY_DSN}
      - LOG_LEVEL=${LOG_LEVEL}
      - WORKERS=${WORKERS}
      - SECURITY_ENABLED=${SECURITY_ENABLED}
      - RATE_LIMIT_ENABLED=${RATE_LIMIT_ENABLED}
      - CORS_ORIGINS=${CORS_ORIGINS}
    ports:
      - "3002:3000"
      - "8002:8000"
    depends_on:
      - staging-db
      - staging-redis
    volumes:
      - ./app:/app
      - ./frontend:/frontend
      - /app/node_modules
      - /frontend/node_modules
      - staging_uploads:/app/uploads
    networks:
      - staging-network

  # Staging Nginx
  staging-nginx:
    image: nginx:alpine
    ports:
      - "8081:80"
      - "4431:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl/staging:/etc/nginx/ssl
    depends_on:
      - staging-app
    networks:
      - staging-network

  # Staging Monitoring
  staging-prometheus:
    image: prom/prometheus:latest
    ports:
      - "9091:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - staging_prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - staging-network

  staging-grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    env_file:
      - .env.staging
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - staging_grafana_data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning
    depends_on:
      - staging-prometheus
    networks:
      - staging-network

volumes:
  staging_postgres_data:
  staging_redis_data:
  staging_uploads:
  staging_prometheus_data:
  staging_grafana_data:

networks:
  staging-network:
    driver: bridge
