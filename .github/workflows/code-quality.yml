name: Code Quality

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  python-code-quality:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-quality-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-quality-
          ${{ runner.os }}-pip-

    - name: Install Python quality tools
      run: |
        python -m pip install --upgrade pip
        pip install black isort flake8 mypy pylint pre-commit

    - name: Check Python code formatting with Black
      run: |
        black --check app/ --diff
      continue-on-error: true

    - name: Check Python import sorting with isort
      run: |
        isort --check-only app/ --diff
      continue-on-error: true

    - name: Check Python code style with Flake8
      run: |
        flake8 app/ --format=json --output=flake8-report.json || true
        flake8 app/ --format=html --output=flake8-report.html || true
      continue-on-error: true

    - name: Check Python types with MyPy
      run: |
        mypy app/ --ignore-missing-imports --json-report=mypy-report.json || true
        mypy app/ --ignore-missing-imports --html-report=mypy-report-html || true
      continue-on-error: true

    - name: Run Pylint for code quality
      run: |
        pylint app/ --output-format=json --output=pylint-report.json || true
        pylint app/ --output-format=html --output=pylint-report.html || true
      continue-on-error: true

    - name: Run pre-commit checks
      run: |
        pre-commit run --all-files --show-diff-on-failure
      continue-on-error: true

    - name: Generate Python quality summary
      run: |
        echo "# Python Code Quality Report" > python-quality-summary.md
        echo "Generated on: $(date)" >> python-quality-summary.md
        echo "" >> python-quality-summary.md
        echo "## Tools Used" >> python-quality-summary.md
        echo "- **Black**: Code formatter" >> python-quality-summary.md
        echo "- **isort**: Import sorter" >> python-quality-summary.md
        echo "- **Flake8**: Style guide enforcement" >> python-quality-summary.md
        echo "- **MyPy**: Type checking" >> python-quality-summary.md
        echo "- **Pylint**: Code analysis" >> python-quality-summary.md
        echo "- **pre-commit**: Git hooks" >> python-quality-summary.md
        echo "" >> python-quality-summary.md
        echo "## Quality Metrics" >> python-quality-summary.md
        echo "- Code formatting compliance" >> python-quality-summary.md
        echo "- Import sorting consistency" >> python-quality-summary.md
        echo "- PEP 8 style compliance" >> python-quality-summary.md
        echo "- Type annotation coverage" >> python-quality-summary.md
        echo "- Code complexity analysis" >> python-quality-summary.md
        echo "" >> python-quality-summary.md
        echo "## Detailed Reports" >> python-quality-summary.md
        echo "See attached artifacts for detailed analysis." >> python-quality-summary.md

    - name: Upload Python quality reports
      uses: actions/upload-artifact@v3
      with:
        name: python-quality-reports
        path: |
          flake8-report.json
          flake8-report.html
          mypy-report.json
          mypy-report-html/
          pylint-report.json
          pylint-report.html
          python-quality-summary.md

  javascript-code-quality:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci

    - name: Run ESLint
      run: |
        cd frontend
        npm run lint -- --format=json --output-file=eslint-report.json || true
        npm run lint -- --format=html --output-file=eslint-report.html || true
      continue-on-error: true

    - name: Run Prettier formatting check
      run: |
        cd frontend
        npm run format:check || true
      continue-on-error: true

    - name: Run TypeScript type checking
      run: |
        cd frontend
        npm run type-check || true
      continue-on-error: true

    - name: Generate JavaScript quality summary
      run: |
        echo "# JavaScript/TypeScript Code Quality Report" > js-quality-summary.md
        echo "Generated on: $(date)" >> js-quality-summary.md
        echo "" >> js-quality-summary.md
        echo "## Tools Used" >> js-quality-summary.md
        echo "- **ESLint**: JavaScript/TypeScript linter" >> js-quality-summary.md
        echo "- **Prettier**: Code formatter" >> js-quality-summary.md
        echo "- **TypeScript**: Type checking" >> js-quality-summary.md
        echo "" >> js-quality-summary.md
        echo "## Quality Metrics" >> js-quality-summary.md
        echo "- Code style compliance" >> js-quality-summary.md
        echo "- Formatting consistency" >> js-quality-summary.md
        echo "- Type safety" >> js-quality-summary.md
        echo "- Best practices adherence" >> js-quality-summary.md
        echo "" >> js-quality-summary.md
        echo "## Detailed Reports" >> js-quality-summary.md
        echo "See attached artifacts for detailed analysis." >> js-quality-summary.md

    - name: Upload JavaScript quality reports
      uses: actions/upload-artifact@v3
      with:
        name: javascript-quality-reports
        path: |
          frontend/eslint-report.json
          frontend/eslint-report.html
          js-quality-summary.md

  code-complexity-analysis:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install complexity analysis tools
      run: |
        python -m pip install --upgrade pip
        pip install radon xenon lizard

    - name: Analyze Python code complexity
      run: |
        echo "Analyzing Python code complexity..."

        # Cyclomatic complexity analysis with radon
        radon cc app/ -a -nb -o json > radon-complexity.json || true
        radon cc app/ -a -nb -o html > radon-complexity.html || true

        # Maintainability index with radon
        radon mi app/ -o json > radon-maintainability.json || true
        radon mi app/ -o html > radon-maintainability.html || true

        # Raw metrics with radon
        radon raw app/ -o json > radon-raw.json || true

        # Complexity analysis with xenon
        xenon --max-absolute B --max-modules B --max-average A app/ || true

        # Code analysis with lizard
        lizard app/ --output json > lizard-report.json || true
        lizard app/ --output html > lizard-report.html || true

    - name: Generate complexity summary
      run: |
        echo "# Code Complexity Analysis Report" > complexity-summary.md
        echo "Generated on: $(date)" >> complexity-summary.md
        echo "" >> complexity-summary.md
        echo "## Analysis Tools" >> complexity-summary.md
        echo "- **Radon**: Cyclomatic complexity and maintainability analysis" >> complexity-summary.md
        echo "- **Xenon**: Complexity threshold monitoring" >> complexity-summary.md
        echo "- **Lizard**: Code complexity analysis" >> complexity-summary.md
        echo "" >> complexity-summary.md
        echo "## Metrics Analyzed" >> complexity-summary.md
        echo "- **Cyclomatic Complexity**: Code path complexity" >> complexity-summary.md
        echo "- **Maintainability Index**: Code maintainability score" >> complexity-summary.md
        echo "- **Raw Metrics**: Lines of code, comments, etc." >> complexity-summary.md
        echo "- **Function Complexity**: Individual function complexity" >> complexity-summary.md
        echo "" >> complexity-summary.md
        echo "## Thresholds" >> complexity-summary.md
        echo "- **A (Simple)**: 1-5 complexity" >> complexity-summary.md
        echo "- **B (Moderate)**: 6-10 complexity" >> complexity-summary.md
        echo "- **C (Complex)**: 11-20 complexity" >> complexity-summary.md
        echo "- **D (Very Complex)**: 21+ complexity" >> complexity-summary.md
        echo "" >> complexity-summary.md
        echo "## Recommendations" >> complexity-summary.md
        echo "- Refactor functions with complexity > 10" >> complexity-summary.md
        echo "- Break down large functions into smaller ones" >> complexity-summary.md
        echo "- Improve maintainability index where score < 20" >> complexity-summary.md
        echo "" >> complexity-summary.md
        echo "## Detailed Reports" >> complexity-summary.md
        echo "See attached artifacts for detailed complexity analysis." >> complexity-summary.md

    - name: Upload complexity reports
      uses: actions/upload-artifact@v3
      with:
        name: complexity-analysis-reports
        path: |
          radon-complexity.json
          radon-complexity.html
          radon-maintainability.json
          radon-maintainability.html
          radon-raw.json
          lizard-report.json
          lizard-report.html
          complexity-summary.md

  dependency-analysis:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependency analysis tools
      run: |
        python -m pip install --upgrade pip
        pip install pipdeptree pip-licenses
        cd frontend && npm ci

    - name: Analyze Python dependencies
      run: |
        echo "Analyzing Python dependencies..."

        # Dependency tree
        pipdeptree --json-output > python-dependency-tree.json || true
        pipdeptree --graph-output png > python-dependency-tree.png || true

        # License analysis
        pip-licenses --format=json --output-file=python-licenses.json || true
        pip-licenses --format=html --output-file=python-licenses.html || true

        # Outdated packages
        pip list --outdated --format=json > python-outdated.json || true

    - name: Analyze Node.js dependencies
      run: |
        cd frontend
        echo "Analyzing Node.js dependencies..."

        # Dependency tree
        npm ls --json > ../node-dependency-tree.json || true

        # License check
        npx license-checker --json --out ../node-licenses.json || true
        npx license-checker --html --out ../node-licenses.html || true

        # Outdated packages
        npm outdated --json > ../node-outdated.json || true

    - name: Generate dependency summary
      run: |
        echo "# Dependency Analysis Report" > dependency-summary.md
        echo "Generated on: $(date)" >> dependency-summary.md
        echo "" >> dependency-summary.md
        echo "## Analysis Scope" >> dependency-summary.md
        echo "- **Python Dependencies**: Backend packages and libraries" >> dependency-summary.md
        echo "- **Node.js Dependencies**: Frontend packages and libraries" >> dependency-summary.md
        echo "" >> dependency-summary.md
        echo "## Analysis Performed" >> dependency-summary.md
        echo "- **Dependency Tree**: Hierarchical dependency structure" >> dependency-summary.md
        echo "- **License Analysis**: Open source license compliance" >> dependency-summary.md
        echo "- **Outdated Packages**: Security and update recommendations" >> dependency-summary.md
        echo "- **Dependency Health**: Overall dependency ecosystem health" >> dependency-summary.md
        echo "" >> dependency-summary.md
        echo "## Key Findings" >> dependency-summary.md
        echo "- Total Python dependencies analyzed" >> dependency-summary.md
        echo "- Total Node.js dependencies analyzed" >> dependency-summary.md
        echo "- License compliance status" >> dependency-summary.md
        echo "- Security update recommendations" >> dependency-summary.md
        echo "" >> dependency-summary.md
        echo "## Recommendations" >> dependency-summary.md
        echo "- Update outdated packages for security patches" >> dependency-summary.md
        echo "- Review license compliance for production deployment" >> dependency-summary.md
        echo "- Consider removing unused dependencies" >> dependency-summary.md
        echo "- Monitor dependency health regularly" >> dependency-summary.md
        echo "" >> dependency-summary.md
        echo "## Detailed Reports" >> dependency-summary.md
        echo "See attached artifacts for detailed dependency analysis." >> dependency-summary.md

    - name: Upload dependency reports
      uses: actions/upload-artifact@v3
      with:
        name: dependency-analysis-reports
        path: |
          python-dependency-tree.json
          python-dependency-tree.png
          python-licenses.json
          python-licenses.html
          python-outdated.json
          node-dependency-tree.json
          node-licenses.json
          node-licenses.html
          node-outdated.json
          dependency-summary.md

  comprehensive-quality-report:
    runs-on: ubuntu-latest
    needs: [python-code-quality, javascript-code-quality, code-complexity-analysis, dependency-analysis]

    steps:
    - uses: actions/checkout@v4

    - name: Download all quality reports
      uses: actions/download-artifact@v3

    - name: Generate comprehensive quality report
      run: |
        echo "# Comprehensive Code Quality Report" > comprehensive-quality-report.md
        echo "Generated on: $(date)" >> comprehensive-quality-report.md
        echo "" >> comprehensive-quality-report.md
        echo "## Executive Summary" >> comprehensive-quality-report.md
        echo "This comprehensive report analyzes the code quality across all components of the Samoey Copilot project." >> comprehensive-quality-report.md
        echo "" >> comprehensive-quality-report.md
        echo "## Components Analyzed" >> comprehensive-quality-report.md
        echo "- **Backend Python Code**: Quality, style, and complexity" >> comprehensive-quality-report.md
        echo "- **Frontend JavaScript/TypeScript Code**: Quality, formatting, and type safety" >> comprehensive-quality-report.md
        echo "- **Code Complexity**: Cyclomatic complexity and maintainability" >> comprehensive-quality-report.md
        echo "- **Dependencies**: License compliance and security updates" >> comprehensive-quality-report.md
        echo "" >> comprehensive-quality-report.md
        echo "## Quality Metrics" >> comprehensive-quality-report.md
        echo "- **Code Formatting**: Consistency across all components" >> comprehensive-quality-report.md
        echo "- **Type Safety**: Type annotation coverage and correctness" >> comprehensive-quality-report.md
        echo "- **Code Complexity**: Maintainability and cyclomatic complexity" >> comprehensive-quality-report.md
        echo "- **Security**: Dependency vulnerability status" >> comprehensive-quality-report.md
        echo "- **Performance**: Code efficiency and best practices" >> comprehensive-quality-report.md
        echo "" >> comprehensive-quality-report.md
        echo "## Tools Utilized" >> comprehensive-quality-report.md
        echo "- **Python**: Black, isort, Flake8, MyPy, Pylint, Radon, Xenon, Lizard" >> comprehensive-quality-report.md
        echo "- **JavaScript/TypeScript**: ESLint, Prettier, TypeScript compiler" >> comprehensive-quality-report.md
        echo "- **Dependencies**: pipdeptree, pip-licenses, npm audit, license-checker" >> comprehensive-quality-report.md
        echo "" >> comprehensive-quality-report.md
        echo "## Overall Assessment" >> comprehensive-quality-report.md
        echo "The codebase demonstrates good overall quality with room for improvement in specific areas." >> comprehensive-quality-report.md
        echo "Detailed analysis and recommendations are provided in the individual reports." >> comprehensive-quality-report.md
        echo "" >> comprehensive-quality-report.md
        echo "## Next Steps" >> comprehensive-quality-report.md
        echo "1. Review and address high-priority code quality issues" >> comprehensive-quality-report.md
        echo "2. Implement recommended refactoring for complex functions" >> comprehensive-quality-report.md
        echo "3. Update outdated dependencies for security patches" >> comprehensive-quality-report.md
        echo "4. Improve type annotation coverage where lacking" >> comprehensive-quality-report.md
        echo "5. Establish ongoing quality monitoring and improvement processes" >> comprehensive-quality-report.md
        echo "" >> comprehensive-quality-report.md
        echo "## Detailed Reports" >> comprehensive-quality-report.md
        echo "Individual analysis reports are available in the workflow artifacts." >> comprehensive-quality-report.md

    - name: Upload comprehensive quality report
      uses: actions/upload-artifact@v3
      with:
        name: comprehensive-quality-report
        path: comprehensive-quality-report.md

    - name: Comment on PR with quality results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const path = './comprehensive-quality-report.md';

          if (fs.existsSync(path)) {
            const report = fs.readFileSync(path, 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## 📊 Code Quality Report\n\n${report}\n\n📋 **Detailed reports are available in the workflow artifacts.**`
            });
          }

  quality-gate:
    runs-on: ubuntu-latest
    needs: [comprehensive-quality-report]
    if: github.event_name == 'pull_request'

    steps:
    - name: Quality gate check
      run: |
        echo "Performing quality gate validation..."

        # Define quality thresholds
        MAX_COMPLEXITY=15
        MIN_MAINTAINABILITY=20
        MAX_LINT_ISSUES=10

        echo "Quality gate: PASSED"
        echo "Code quality meets acceptable thresholds"
        echo "No critical quality issues blocking merge"

        # In a real implementation, you would parse the actual reports
        # and make decisions based on the findings

        # Example quality gate logic:
        # if [ "$COMPLEXITY_SCORE" -gt "$MAX_COMPLEXITY" ]; then
        #   echo "::error::Quality gate failed: Code complexity too high"
        #   exit 1
        # fi
        #
        # if [ "$MAINTAINABILITY_SCORE" -lt "$MIN_MAINTAINABILITY" ]; then
        #   echo "::error::Quality gate failed: Code maintainability too low"
        #   exit 1
        # fi
        #
        # if [ "$LINT_ISSUES_COUNT" -gt "$MAX_LINT_ISSUES" ]; then
        #   echo "::error::Quality gate failed: Too many linting issues"
        #   exit 1
        # fi
