name: Performance Testing

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 3 * * *'  # Daily at 3 AM UTC
  workflow_dispatch:

jobs:
  backend-performance-test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: samoey_copilot_perf
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-perf-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-perf-
          ${{ runner.os }}-pip-

    - name: Install performance testing tools
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        pip install -r app/requirements.txt
        pip install locust pytest-benchmark psutil memory-profiler

    - name: Start backend server
      run: |
        cd app
        python -m uvicorn main:app --host 0.0.0.0 --port 8000 --workers 1 &
        sleep 15
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/samoey_copilot_perf
        REDIS_URL: redis://localhost:6379
        SECRET_KEY: perf-test-secret-key
        ENVIRONMENT: testing

    - name: Run database performance tests
      run: |
        cd app
        python -m pytest tests/test_performance.py -v --benchmark-only
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/samoey_copilot_perf
        REDIS_URL: redis://localhost:6379
        SECRET_KEY: perf-test-secret-key

    - name: Run API load testing with Locust
      run: |
        # Create Locust test file
        cat > locustfile.py << 'EOF'
        from locust import HttpUser, task, between
        import json
        import random

        class ApiUser(HttpUser):
            wait_time = between(1, 3)

            def on_start(self):
                response = self.client.post("/api/v1/auth/login", json={
                    "username": "testuser",
                    "password": "testpass"
                })
                if response.status_code == 200:
                    self.token = response.json().get("access_token")
                    self.headers = {"Authorization": f"Bearer {self.token}"}
                else:
                    self.token = None
                    self.headers = {}

            @task(3)
            def get_health(self):
                self.client.get("/api/health", headers=self.headers)

            @task(2)
            def get_analytics(self):
                self.client.get("/api/v1/analytics", headers=self.headers)

            @task(2)
            def get_conversations(self):
                self.client.get("/api/v1/conversations", headers=self.headers)

            @task(1)
            def create_message(self):
                if self.token:
                    self.client.post("/api/v1/messages", json={
                        "content": f"Performance test message {random.randint(1, 1000)}",
                        "conversation_id": random.randint(1, 10)
                    }, headers=self.headers)

            @task(1)
            def get_user_profile(self):
                if self.token:
                    self.client.get("/api/v1/users/me", headers=self.headers)
        EOF

        # Run Locust in headless mode
        locust --host http://localhost:8000 --users 10 --spawn-rate 2 --run-time 2m --headless --html locust-report.html

    - name: Run memory profiling
      run: |
        cd app
        python -m memory_profiler main.py > memory-profile.txt || true

    - name: Generate performance summary
      run: |
        echo "# Backend Performance Test Report" > backend-performance-summary.md
        echo "Generated on: $(date)" >> backend-performance-summary.md
        echo "" >> backend-performance-summary.md
        echo "## Tests Performed" >> backend-performance-summary.md
        echo "- **Database Performance**: Query optimization and indexing analysis" >> backend-performance-summary.md
        echo "- **API Load Testing**: Concurrent user simulation with Locust" >> backend-performance-summary.md
        echo "- **Memory Profiling**: Memory usage analysis and leak detection" >> backend-performance-summary.md
        echo "- **Response Time Analysis**: API endpoint performance metrics" >> backend-performance-summary.md
        echo "" >> backend-performance-summary.md
        echo "## Key Metrics" >> backend-performance-summary.md
        echo "- **Requests per Second (RPS)**: API throughput capacity" >> backend-performance-summary.md
        echo "- **Response Time**: Average and percentile response times" >> backend-performance-summary.md
        echo "- **Memory Usage**: Peak and average memory consumption" >> backend-performance-summary.md
        echo "- **Error Rate**: Failed request percentage" >> backend-performance-summary.md
        echo "- **Database Query Time**: Query performance metrics" >> backend-performance-summary.md
        echo "" >> backend-performance-summary.md
        echo "## Performance Targets" >> backend-performance-summary.md
        echo "- **Response Time**: < 500ms (95th percentile)" >> backend-performance-summary.md
        echo "- **Throughput**: > 100 RPS" >> backend-performance-summary.md
        echo "- **Error Rate**: < 1%" >> backend-performance-summary.md
        echo "- **Memory Usage**: < 512MB" >> backend-performance-summary.md
        echo "" >> backend-performance-summary.md
        echo "## Detailed Reports" >> backend-performance-summary.md
        echo "See attached artifacts for detailed performance analysis." >> backend-performance-summary.md

    - name: Upload performance reports
      uses: actions/upload-artifact@v3
      with:
        name: backend-performance-reports
        path: |
          locust-report.html
          memory-profile.txt
          backend-performance-summary.md

  frontend-performance-test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci

    - name: Build frontend application
      run: |
        cd frontend
        npm run build

    - name: Run Lighthouse CI performance audit
      run: |
        cd frontend
        npx @lhci/cli@0.12.x autorun
      env:
        LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

    - name: Run Webpack Bundle Analyzer
      run: |
        cd frontend
        npm install --save-dev webpack-bundle-analyzer
        npx webpack-bundle-analyzer .next/static/chunks --report bundle-report.html --mode static --no-open

    - name: Generate frontend performance summary
      run: |
        echo "# Frontend Performance Test Report" > frontend-performance-summary.md
        echo "Generated on: $(date)" >> frontend-performance-summary.md
        echo "" >> frontend-performance-summary.md
        echo "## Tests Performed" >> frontend-performance-summary.md
        echo "- **Lighthouse Audit**: Performance, accessibility, SEO, and best practices" >> frontend-performance-summary.md
        echo "- **Bundle Analysis**: JavaScript bundle size and optimization" >> frontend-performance-summary.md
        echo "- **Build Performance**: Compilation and build time analysis" >> frontend-performance-summary.md
        echo "- **Runtime Performance**: Client-side performance metrics" >> frontend-performance-summary.md
        echo "" >> frontend-performance-summary.md
        echo "## Key Metrics" >> frontend-performance-summary.md
        echo "- **Performance Score**: Lighthouse performance rating" >> frontend-performance-summary.md
        echo "- **Bundle Size**: Total JavaScript bundle size" >> frontend-performance-summary.md
        echo "- **First Contentful Paint**: Initial content rendering time" >> frontend-performance-summary.md
        echo "- **Largest Contentful Paint**: Main content rendering time" >> frontend-performance-summary.md
        echo "- **Time to Interactive**: Page interactivity time" >> frontend-performance
