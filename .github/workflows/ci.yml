name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test-backend:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10', '3.11']

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: samoey_copilot_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        pip install -r app/requirements.txt

    - name: Run pre-commit checks
      run: |
        pip install pre-commit
        pre-commit run --all-files

    - name: Run security scanning
      run: |
        pip install bandit safety
        bandit -r app/ -f json -o bandit-report.json || true
        safety check --json --output safety-report.json || true

    - name: Run backend tests
      run: |
        cd app
        python -m pytest --cov=. --cov-report=xml --cov-report=html -v
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/samoey_copilot_test
        REDIS_URL: redis://localhost:6379
        SECRET_KEY: test-secret-key

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./app/coverage.xml
        flags: backend
        name: backend-coverage

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports-${{ matrix.python-version }}
        path: |
          bandit-report.json
          safety-report.json

  test-frontend:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci

    - name: Run security audit
      run: |
        cd frontend
        npm audit --audit-level moderate

    - name: Run linting
      run: |
        cd frontend
        npm run lint

    - name: Run type checking
      run: |
        cd frontend
        npm run type-check

    - name: Run frontend tests
      run: |
        cd frontend
        npm run test:ci
      env:
        CI: true

    - name: Build frontend
      run: |
        cd frontend
        npm run build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build
        path: frontend/.next/

  integration-tests:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: samoey_copilot_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        pip install -r app/requirements.txt
        cd frontend && npm ci

    - name: Start backend server
      run: |
        cd app
        python -m uvicorn main:app --host 0.0.0.0 --port 8000 &
        sleep 10
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/samoey_copilot_test
        REDIS_URL: redis://localhost:6379
        SECRET_KEY: test-secret-key

    - name: Run integration tests
      run: |
        cd tests
        python -m pytest test_integration.py -v
      env:
        API_BASE_URL: http://localhost:8000
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/samoey_copilot_test
        REDIS_URL: redis://localhost:6379
        SECRET_KEY: test-secret-key

  code-quality:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black flake8 isort mypy
        cd frontend && npm ci

    - name: Check Python code formatting
      run: |
        black --check app/
        isort --check-only app/
        flake8 app/

    - name: Check Python types
      run: |
        mypy app/ --ignore-missing-imports

    - name: Check JavaScript/TypeScript formatting
      run: |
        cd frontend
        npm run format:check

    - name: Generate code quality report
      run: |
        echo "Code Quality Analysis" > code-quality-report.md
        echo "========================" >> code-quality-report.md
        echo "Backend: Python formatting and type checking completed" >> code-quality-report.md
        echo "Frontend: JavaScript/TypeScript formatting completed" >> code-quality-report.md

    - name: Upload code quality report
      uses: actions/upload-artifact@v3
      with:
        name: code-quality-report
        path: code-quality-report.md
