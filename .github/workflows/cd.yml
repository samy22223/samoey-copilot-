name: Continuous Deployment

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      version:
        description: 'Version to deploy'
        required: false
        type: string

jobs:
  build-and-deploy-staging:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'staging'
    environment: staging

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        pip install -r app/requirements.txt
        cd frontend && npm ci

    - name: Run tests
      run: |
        npm run test
        npm run test:backend

    - name: Build application
      run: |
        npm run build

    - name: Build Docker images
      run: |
        docker-compose -f docker-compose.staging.yml build

    - name: Log in to container registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Tag and push Docker images
      run: |
        # Tag images with Git SHA and latest
        IMAGE_TAG=${{ github.sha }}
        docker tag samoey-copilot-frontend:latest ghcr.io/${{ github.repository }}/frontend:$IMAGE_TAG
        docker tag samoey-copilot-backend:latest ghcr.io/${{ github.repository }}/backend:$IMAGE_TAG
        docker tag samoey-copilot-frontend:latest ghcr.io/${{ github.repository }}/frontend:staging-latest
        docker tag samoey-copilot-backend:latest ghcr.io/${{ github.repository }}/backend:staging-latest

        # Push images
        docker push ghcr.io/${{ github.repository }}/frontend:$IMAGE_TAG
        docker push ghcr.io/${{ github.repository }}/backend:$IMAGE_TAG
        docker push ghcr.io/${{ github.repository }}/frontend:staging-latest
        docker push ghcr.io/${{ github.repository }}/backend:staging-latest

    - name: Deploy to staging
      run: |
        # Create deployment configuration
        cat > docker-compose.staging.override.yml << EOF
        version: '3.8'
        services:
          frontend:
            image: ghcr.io/${{ github.repository }}/frontend:${{ github.sha }}
            environment:
              - NODE_ENV=staging
              - NEXT_PUBLIC_API_URL=https://staging-api.samoey-copilot.com
              - NEXT_PUBLIC_WS_URL=wss://staging-api.samoey-copilot.com/ws

          backend:
            image: ghcr.io/${{ github.repository }}/backend:${{ github.sha }}
            environment:
              - ENVIRONMENT=staging
              - DATABASE_URL=${{ secrets.STAGING_DATABASE_URL }}
              - REDIS_URL=${{ secrets.STAGING_REDIS_URL }}
              - SECRET_KEY=${{ secrets.STAGING_SECRET_KEY }}
              - OPENAI_API_KEY=${{ secrets.STAGING_OPENAI_API_KEY }}
              - HUGGINGFACE_TOKEN=${{ secrets.STAGING_HUGGINGFACE_TOKEN }}
        EOF

        # Deploy to staging server (this would be replaced with actual deployment logic)
        echo "Deploying to staging environment..."
        echo "Docker images pushed to registry:"
        echo "- Frontend: ghcr.io/${{ github.repository }}/frontend:${{ github.sha }}"
        echo "- Backend: ghcr.io/${{ github.repository }}/backend:${{ github.sha }}"

    - name: Run smoke tests
      run: |
        echo "Running smoke tests against staging environment..."
        # This would contain actual smoke test commands
        sleep 30 # Simulate smoke test execution
        echo "Smoke tests completed successfully"

    - name: Notify deployment
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  build-and-deploy-production:
    runs-on: ubuntu-latest
    if: github.event.inputs.environment == 'production'
    environment: production

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        pip install -r app/requirements.txt
        cd frontend && npm ci

    - name: Run comprehensive tests
      run: |
        npm run test
        npm run test:backend
        npm run test:e2e

    - name: Security scan
      run: |
        pip install bandit safety
        bandit -r app/ -f json -o bandit-report.json
        safety check --json --output safety-report.json
        cd frontend && npm audit --audit-level=moderate

    - name: Build application
      run: |
        npm run build

    - name: Build Docker images
      run: |
        docker-compose -f docker-compose.prod.yml build

    - name: Log in to container registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Tag and push Docker images
      run: |
        # Tag images with version and latest
        VERSION=${{ github.event.inputs.version || github.sha }}
        docker tag samoey-copilot-frontend:latest ghcr.io/${{ github.repository }}/frontend:$VERSION
        docker tag samoey-copilot-backend:latest ghcr.io/${{ github.repository }}/backend:$VERSION
        docker tag samoey-copilot-frontend:latest ghcr.io/${{ github.repository }}/frontend:latest
        docker tag samoey-copilot-backend:latest ghcr.io/${{ github.repository }}/backend:latest

        # Push images
        docker push ghcr.io/${{ github.repository }}/frontend:$VERSION
        docker push ghcr.io/${{ github.repository }}/backend:$VERSION
        docker push ghcr.io/${{ github.repository }}/frontend:latest
        docker push ghcr.io/${{ github.repository }}/backend:latest

    - name: Deploy to production
      run: |
        # Create deployment configuration
        cat > docker-compose.prod.override.yml << EOF
        version: '3.8'
        services:
          frontend:
            image: ghcr.io/${{ github.repository }}/frontend:${{ github.event.inputs.version || github.sha }}
            environment:
              - NODE_ENV=production
              - NEXT_PUBLIC_API_URL=https://api.samoey-copilot.com
              - NEXT_PUBLIC_WS_URL=wss://api.samoey-copilot.com/ws

          backend:
            image: ghcr.io/${{ github.repository }}/backend:${{ github.event.inputs.version || github.sha }}
            environment:
              - ENVIRONMENT=production
              - DATABASE_URL=${{ secrets.PROD_DATABASE_URL }}
              - REDIS_URL=${{ secrets.PROD_REDIS_URL }}
              - SECRET_KEY=${{ secrets.PROD_SECRET_KEY }}
              - OPENAI_API_KEY=${{ secrets.PROD_OPENAI_API_KEY }}
              - HUGGINGFACE_TOKEN=${{ secrets.PROD_HUGGINGFACE_TOKEN }}
              - SENTRY_DSN=${{ secrets.PROD_SENTRY_DSN }}
        EOF

        # Deploy to production server (this would be replaced with actual deployment logic)
        echo "Deploying to production environment..."
        echo "Docker images pushed to registry:"
        echo "- Frontend: ghcr.io/${{ github.repository }}/frontend:${{ github.event.inputs.version || github.sha }}"
        echo "- Backend: ghcr.io/${{ github.repository }}/backend:${{ github.event.inputs.version || github.sha }}"

    - name: Run production smoke tests
      run: |
        echo "Running production smoke tests..."
        # This would contain actual production smoke test commands
        sleep 60 # Simulate smoke test execution
        echo "Production smoke tests completed successfully"

    - name: Create deployment rollback point
      run: |
        echo "Creating deployment rollback point..."
        # This would create database backup and other rollback preparations

    - name: Notify deployment
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  rollback:
    runs-on: ubuntu-latest
    if: github.event.inputs.rollback == 'true'
    environment: ${{ github.event.inputs.environment }}

    steps:
    - uses: actions/checkout@v4

    - name: Rollback deployment
      run: |
        echo "Rolling back deployment for ${{ github.event.inputs.environment }} environment..."
        # This would contain actual rollback logic
        echo "Rollback completed successfully"

    - name: Notify rollback
      uses: 8398a7/action-slack@v3
      with:
        status: 'rollback'
        channel: '#deployments'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
